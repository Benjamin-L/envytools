TOC

0. Introduction
1. Pseudocode conventions
2. Conditional branch: bra
3. Unconditional branch: bra
4. Subroutine call: call
5. Subroutine return: ret


= Introduction =

The flow control instructions on falcon include conditional relative branches,
unconditional absolute branches, absolute calls, and returns. Calls use the
stack in data segment for storage for return addresses [see falcon/data.txt].
The conditions available for branching are based on the low 12 bits of $flags
register:

 - bits 0-7: $p0-$p7, general-purpose predicates
 - bit 8: c, carry flag
 - bit 9: o, signed overflow flag
 - bit a: s, sign flag
 - bit b: z, zero flag

c, o, s, z flags are automatically set by many ALU instructions, $p0-$p7 have
to be explicitely manipulated. See falcon/arith.txt for more details.

Address of the current instruction is always available through the read-only
$pc special register.

When a branching instruction is taken, the execution time is either 4 or
5 cycles. The execution time depends on the address of the next instruction to
be executed. If this instruction can be loaded in one cycle (the instruction
is contained in a single aligned 32-bit memory block in the code section),
4 instructions will be necessary. If the instruction is split in two blocks,
5 instructions will then be necessary.


= Pseudocode conventions =

$pc is usually automatically incremented by opcode length after each
instruction - documentation for other kinds of instructions doesn't mention
it explicitely for each insn. However, due to the nature of this category
of instructions, all effects on $pc are mentioned explicitely in this file.

oplen is the length of the currently executed instruction in bytes.

See also conventions from falcon/arith.txt and falcon/data.txt.


= Conditional branch: bra =

Branches to a given location if the condition evaluates to true. Target is
$pc-relative.

Instructions:
	bra $pX - if predicate true			subopcode = 00+X
	bra c - if carry				subopcode = 08
	bra b - if unsigned below			[alias for bra c]
	bra o - if overflow				subopcode = 09
	bra s - if sign set / negative			subopcode = 0a
	bra z - if zero					subopcode = 0b
	bra e - if equal				[alias for bra z]
	bra a - if unsigned above			subopcode = 0c
	bra na - if not unsigned above			subopcode = 0d
	bra be - if unsigned below or equal		[alias for bra na]
	bra - always					subopcode = 0e
	bra not $pX - if predicate false		subopcode = 10+X
	bra nc - if not carry				subopcode = 18
	bra nb - if not unsigned below			[alias for bra nc]
	bra ae - if unsigned above or equal		[alias for bra nc]
	bra no - if not overflow			subopcode = 19
	bra ns - if sign unset / positive		subopcode = 1a
	bra nz - if not zero				subopcode = 1b
	bra ne - if not equal				[alias for bra nz]
	bra g - if signed greater			subopcode = 1c [v3+ only]
	bra le - if signed less or equal		subopcode = 1d [v3+ only]
	bra l - if signed less				subopcode = 1e [v3+ only]
	bra ge - if signed greater or equal		subopcode = 1f [v3+ only]
Instruction class: unsized
Execution time: 1 cycle if not taken, 4-5 cycles if taken
Operands: DIFF
Forms:
	I8					opcode = f4
	I16					opcode = f5
Immediates: sign-extended
Operation:
	switch (cc) {
		case $pX: // $p0..$p7
			cond = $flags.$pX;
			break;
		case c:
			cond = $flags.c;
			break;
		case o:
			cond = $flags.o;
			break;
		case s:
			cond = $flags.s;
			break;
		case z:
			cond = $flags.z;
			break;
		case a:
			cond = !$flags.c && !$flags.z;
			break;
		case na:
			cond = $flags.c || $flags.z;
			break;
		case (none):
			cond = 1;
			break;
		case not $pX: // $p0..$p7
			cond = !$flags.$pX;
			break;
		case nc:
			cond = !$flags.c;
			break;
		case no:
			cond = !$flags.o;
			break;
		case ns:
			cond = !$flags.s;
			break;
		case nz:
			cond = !$flags.z;
			break;
		case g:
			cond = !($flags.o ^ $flags.s) && !$flags.z;
			break;
		case le:
			cond = ($flags.o ^ $flags.s) || $flags.z;
			break;
		case l:
			cond = $flags.o ^ $flags.s;
			break;
		case ge:
			cond = !($flags.o ^ $flags.s);
			break;
	}
	if (cond)
		$pc = $pc + DIFF;
	else
		$pc = $pc + oplen;


= Unconditional branch: bra =

Branches to the target. Target is specified as absolute address. Yes, the
immediate forms are pretty much redundant with the relative branch form.

Instructions:
	bra - branch
Instruction class: unsized
Execution time: 4-5 cycles
Operands: TRG
Forms:
	I8				opcode = f4, subopcode = 20
	I16				opcode = f5, subopcode = 20
	R2				opcode = f9, subopcode = 4
Immediates: zero-extended
Operation:
	$pc = TRG;


= Subroutine call: call =

Pushes return address onto stack and branches to the target. Target is
specified as absolute address.

Instructions:
	call - Call a subroutine
Instruction class: unsized
Execution time: 4-5 cycles
Operands: TRG
Forms:
	I8				opcode = f4, subopcode = 21
	I16				opcode = f5, subopcode = 21
	R2				opcode = f9, subopcode = 5
Immediates: zero-extended
Operation:
	$sp -= 4;
	ST(32, $sp, $pc + oplen);
	$pc = TRG;


= Subroutine return: ret =

Returns from a previous call.

Instructions:
	ret - Return from a subroutine
Instruction class: unsized
Execution time: 5-6 cycles
Operands: -
Forms:
	[no operands]			opcode = f8, subopcode = 0
Operation:
	$pc = LD(32, $sp);
	$sp += 4;

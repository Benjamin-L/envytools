TOC

0. Introduction
1. Returning form an interrupt: iret
2. Software trap trigger: trap


= Introduction =

falcon has interrupt support. There are 16 interrupt lines on each engine, and
two interrupt vectors on the microprocessor. Each of the interrupt lines can
be independently routed to one of the microprocessor vectors, or to the PMC
interrupt line, if the engine has one. The lines can be individually masked
as well. They can be triggered by hw events, or by the user.

The lines are:

  0 [E]: periodic timer		[falcon/timer.txt]
  1 [E]: watchdog timer		[falcon/timer.txt]
  2 [L]: FIFO data available	[falcon/fifo.txt]
  3 [E]: PFIFO channel switch	[falcon/fifo.txt]
  4 [E]: uc halted		[falcon/proc.txt]
  5 [E]: ??? [related to falcon+0x0a4] [XXX]
  6-7 [E]: scratch [unused by hw, user-defined]
  8-9 [E by default]: engine-specific
  10-15 [L by default]: engine-specific

E means edge-triggered interrupt, L means level-triggered. Each interrupt
line has a physical wire assigned to it. For edge-triggered interrupts,
there's a flip-flop that's set by 0-to-1 edge on the wire or a write to
INTR_SET register, and cleared by writing to INTR_CLEAR register. For
level-triggered interrupts, interrupt status is wired straight to the input.

The interrupt and interrupt enable registers are actually visible as
set/clear/status register triples: writing to the set register sets all bits
that are 1 in the written value to 1. Writing to clear register sets them
to 0. The status register shows the current value when read, but cannot be
written.

MMIO 0x000 / I[0x00000]: INTR_SET
MMIO 0x004 / I[0x00100]: INTR_CLEAR
MMIO 0x008 / I[0x00200]: INTR [status]
  A mask of currently pending interrupts. Write to SET to manually trigger
  an interrupt. Write to CLEAR to ack an interrupt. Attempts to SET or CLEAR
  level-triggered interrupts are ignored.

MMIO 0x010 / I[0x00400]: INTR_EN_SET
MMIO 0x014 / I[0x00500]: INTR_EN_CLEAR
MMIO 0x018 / I[0x00600]: INTR_EN [status]
  A mask of enabled interrupts. If a bit is set to 0 here, the interrupt
  handler isn't run if a given interrupt happens [but the INTR bit is still
  set and it'll run once INTR_EN bit is set again].

MMIO 0x00c / I[0x00300]: INTR_MODE [v3+ only]
  Bits 0-15 are modes for the corresponding interrupt lines. 0 is edge
  trigered, 1 is level triggered.

  Setting a sw interrupt to level-triggered, or a hw interrupt to mode it
  wasn't meant to be set is likely a bad idea.

  This register is set to 0xfc04 on reset.

[XXX: check edge/level distinction on v0]

MMIO 0x01c / I[0x00700]: INTR_ROUTING
  Bits 0-15: bit 0 of interrupt routing selector, one for each interrupt line
  Bits 16-31: bit 1 of interrupt routing selector, one for each interrupt line
For each interrupt line, the two bits from respective bitfields are put
together to find its routing testination:
  0: falcon vector 0
  1: PMC HOST/DAEMON line
  2: falcon vector 1
  3: PMC NRHOST line [NVC0+ selected engines only]

If the engine has a PMC interrupt line and any interrupt set for PMC irq
delivery is active and unmasked, the corresponding PMC interrupt input line
is active.

falcon interrupt and trap delivery is controlled by $iv0, $iv1, $tv, $tstatus
registers and ie0, ie1, is0, is1, ta $flags bits. Traps behave like
interrupts, but are triggered by events inside the UC.

$iv0 is address of interrupt vector 0. $iv1 is address of interrupt vector 1.
$tv is address of trap vector. ieX are interrupt enable bits for corresponding
vectors. isX are interrupt enable save bits. ta is trap active flag. $tstatus
is present on v3+ only and contains information about last trap. The bitfields
of $tstatus are:

  bits 0-19 [or as many bits as required]: faulting $pc
  bits 20-23: trap reason

The known trap reasons are:

  0-3	software trap		[falcon/intr.txt]
  8	invalid opcode		[falcon/isa.txt]
  0xa	page fault - no hit	[falcon/vm.txt]
  0xb	page fault - multi hit	[falcon/vm.txt]
  0xf   breakpoint hit		[falcon/debug.txt]

Whenever there's an active and enabled interrupt set for vector X delivery,
and ieX flag is set, vector X is called:

Operation:
	$sp -= 4;
	ST(32, $sp, $pc);
	$flags.is0 = $flags.ie0;
	$flags.is1 = $flags.ie1;
	$flags.ie0 = 0;
	$flags.ie1 = 0;
	if (falcon_version >= 4) {
		$flags.unk16 = $flags.unk12;
		$flags.unk1d = $flags.unk1a;
		$flags.unk12 = 0;
	}
	if (vector 0)
		$pc = $iv0;
	else
		$pc = $iv1;

Whenever a trapworthy event happens on the uc, a trap is delivered:

Operation:
	if ($flags.ta) { // double trap?
		EXIT; // see falcon/proc.txt
	}
	$flags.ta = 1;
	if (falcon_version != 0) // on v0, there's only one possible trap reason anyway [8]
		$tstatus = $pc | reason << 20;
	if (falcon_version >= 4) {
		/* XXX: didn't that happen before? */
		$flags.is0 = $flags.ie0;
		$flags.is1 = $flags.ie1;
		$flags.unk16 = $flags.unk12;
		$flags.unk1d = $flags.unk1a;
		$flags.ie0 = 0;
		$flags.ie1 = 0;
		$flags.unk12 = 0;
	}
	$sp -= 4;
	ST(32, $sp, $pc);
	$pc = $tv;


= Returning form an interrupt: iret =

Returns from an interrupt handler.

Instructions:
	iret - Return from an interrupt
Instruction class: unsized
Operands: -
Forms:
	[no operands]			opcode = f8, subopcode = 1
Operation:
	$pc = LD(32, $sp);
	$sp += 4;
	$flags.ie0 = $flags.is0;
	$flags.ie1 = $flags.is1;
	if (falcon_version >= 4) {
		$flags.unk12 = $flags.unk16;
		$flags.unk1a = $flags.unk1d;
	}


= Software trap trigger: trap =

Triggers a software trap.

Instructions:
	trap 0 - software trap #0		subopcode = 8 [v3+ only]
	trap 1 - software trap #1		subopcode = 9 [v3+ only]
	trap 2 - software trap #2		subopcode = a [v3+ only]
	trap 3 - software trap #3		subopcode = b [v3+ only]
Instruction class: unsized
Operands: -
Forms:
	[no operands]				opcode = f8
Operation:
	$pc += oplen; // return will be to the insn after this one
	TRAP(arg);
